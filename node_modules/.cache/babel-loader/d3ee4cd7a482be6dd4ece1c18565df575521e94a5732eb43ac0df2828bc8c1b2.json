{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\David\\\\Downloads\\\\movie-recommendation-system-main\\\\movie-recommendation-system-main\\\\frontend\\\\src\\\\pages\\\\MoodSelectionPage.js\",\n  _s = $RefreshSig$();\n// MoodSelectionPage.js\nimport React, { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AnswerContext } from '../../AnswerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodSelectionPage = () => {\n  _s();\n  const {\n    answers,\n    setAnswers\n  } = useContext(AnswerContext);\n  const navigate = useNavigate();\n  const handleMoodSelect = mood => {\n    if (mood === 'comedy') {\n      // Q1=1 => \"Lighthearted and comedic\"\n      const updated = {\n        ...answers,\n        Q1: 1\n      };\n      setAnswers(updated);\n      navigate('/musical'); // or /comedy? depends on your flow\n    } else {\n      // Q1=0 => \"Serious and dramatic\"\n      const updated = {\n        ...answers,\n        Q1: 0\n      };\n      setAnswers(updated);\n      navigate('/drama'); // or next route in your dramatic flow\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What kind of movie are you in the mood for?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMoodSelect('comedy'),\n      children: \"Lighthearted and comedic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMoodSelect('drama'),\n      children: \"Serious and dramatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(MoodSelectionPage, \"BomFtazYtoPWKmNi6ekDpqzJtpA=\", false, function () {\n  return [useNavigate];\n});\n_c = MoodSelectionPage;\nexport default MoodSelectionPage;\nvar _c;\n$RefreshReg$(_c, \"MoodSelectionPage\");","map":{"version":3,"names":["React","useContext","useNavigate","AnswerContext","jsxDEV","_jsxDEV","MoodSelectionPage","_s","answers","setAnswers","navigate","handleMoodSelect","mood","updated","Q1","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/David/Downloads/movie-recommendation-system-main/movie-recommendation-system-main/frontend/src/pages/MoodSelectionPage.js"],"sourcesContent":["// MoodSelectionPage.js\r\nimport React, { useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AnswerContext } from '../../AnswerContext';\r\n\r\nconst MoodSelectionPage = () => {\r\n    const { answers, setAnswers } = useContext(AnswerContext);\r\n    const navigate = useNavigate();\r\n\r\n    const handleMoodSelect = (mood) => {\r\n        if (mood === 'comedy') {\r\n            // Q1=1 => \"Lighthearted and comedic\"\r\n            const updated = { ...answers, Q1: 1 };\r\n            setAnswers(updated);\r\n            navigate('/musical'); // or /comedy? depends on your flow\r\n        } else {\r\n            // Q1=0 => \"Serious and dramatic\"\r\n            const updated = { ...answers, Q1: 0 };\r\n            setAnswers(updated);\r\n            navigate('/drama'); // or next route in your dramatic flow\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What kind of movie are you in the mood for?</h1>\r\n            <button onClick={() => handleMoodSelect('comedy')}>\r\n                Lighthearted and comedic\r\n            </button>\r\n            <button onClick={() => handleMoodSelect('drama')}>\r\n                Serious and dramatic\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoodSelectionPage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGR,UAAU,CAACE,aAAa,CAAC;EACzD,MAAMO,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,gBAAgB,GAAIC,IAAI,IAAK;IAC/B,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACnB;MACA,MAAMC,OAAO,GAAG;QAAE,GAAGL,OAAO;QAAEM,EAAE,EAAE;MAAE,CAAC;MACrCL,UAAU,CAACI,OAAO,CAAC;MACnBH,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACH;MACA,MAAMG,OAAO,GAAG;QAAE,GAAGL,OAAO;QAAEM,EAAE,EAAE;MAAE,CAAC;MACrCL,UAAU,CAACI,OAAO,CAAC;MACnBH,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxB;EACJ,CAAC;EAED,oBACIL,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAI;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpDd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMT,gBAAgB,CAAC,QAAQ,CAAE;MAAAI,QAAA,EAAC;IAEnD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMT,gBAAgB,CAAC,OAAO,CAAE;MAAAI,QAAA,EAAC;IAElD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACZ,EAAA,CA7BID,iBAAiB;EAAA,QAEFJ,WAAW;AAAA;AAAAmB,EAAA,GAF1Bf,iBAAiB;AA+BvB,eAAeA,iBAAiB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}